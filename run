#!/bin/bash

function cleanup() {
  pushd docker
  docker-compose rm -fs 
  popd
  # Purge the Environment
  sudo chown -Rf ${USER}:wheel ./consul/data/
  rm -rf ./consul/data/client/*
  rm -rf ./consul/data/server/*
  sudo chown -Rf ${USER}:wheel ./databases/postgres/db
  rm -rf ./databases/postgres/db/*
  sudo chown -Rf ${USER}:wheel ./gogs/data
  rm -rf ./gogs/data/*
  rm -rf ./terraform/.terraform
  rm -rf ./terraform/.terraform.lock.hcl
  rm -rf ./terraform/terraform.tfstate
  rm -rf ./secrets/*.pem
  exit 0
}

trap cleanup SIGKILL SIGINT

function init_docker() {
  pushd docker
  docker-compose up -d
  popd
}

function init_terraform() {
  pushd terraform
  tofu init
  tofu apply -auto-approve
  cd ..
  popd
}

# Test with login to Boundary after provisioning
function login() {
  export PASS=foofoofoo
  boundary authenticate password -login-name jeff -password env://PASS -auth-method-id $(primary_org_ampw)
}

function primary_org_id() {
  strip $(boundary scopes list -keyring-type=none -format json | jq  -c '.items[] | select(.name | contains("primary")) | .id')
}

function primary_org_ampw() {
  strip $(boundary auth-methods list -keyring-type=none -scope-id $(primary_org_id) -format json | jq -c '.items[].id') 
}

function strip() {
  echo "$1" | tr -d '"'
}

for arg in "$@"
do
    case $arg in
        all)
        init_docker
        # init_terraform
        shift
        ;;
        login)
        login
        shift
        ;;
        cleanup)
        cleanup
        shift
        ;;
        *)
        echo "cmd not found: try 'all', 'login', or 'cleanup'"
        shift
        ;;
    esac
done